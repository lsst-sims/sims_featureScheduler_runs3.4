#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

import healpy as hp
import matplotlib.pylab as plt
import numpy as np
import rubin_scheduler
import rubin_scheduler.scheduler.basis_functions as bf
import rubin_scheduler.scheduler.detailers as detailers
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.utils import iers
from rubin_scheduler.scheduler import sim_runner
from rubin_scheduler.site_models import _read_fields
from rubin_scheduler.scheduler.model_observatory import ModelObservatory
from rubin_scheduler.scheduler.schedulers import CoreScheduler, SimpleFilterSched
from rubin_scheduler.scheduler.surveys import (
    BlobSurvey,
    GreedySurvey,
    LongGapSurvey,
    ScriptedSurvey,
    BaseMarkovSurvey,
    generate_ddf_scheduled_obs,
)
from rubin_scheduler.scheduler.utils import (
    ConstantFootprint,
    EuclidOverlapFootprint,
    make_rolling_footprints,
    scheduled_observation,
    comcam_tessellate,
    gnomonic_project_toxy,
    tsp_convex,
    SimTargetooServer,
    TargetoO,
)
from rubin_scheduler.utils import (
    _hpid2_ra_dec,
    _ra_dec2_hpid,
    _approx_ra_dec2_alt_az,
    _angular_separation,
)

# So things don't fail on hyak
iers.conf.auto_download = False
# XXX--note this line probably shouldn't be in production
iers.conf.auto_max_age = None


def example_scheduler(args):
    survey_length = args.survey_length  # Days
    out_dir = args.out_dir
    verbose = args.verbose
    max_dither = args.maxDither
    illum_limit = args.moon_illum_limit
    nexp = args.nexp
    nslice = args.rolling_nslice
    rolling_scale = args.rolling_strength
    dbroot = args.dbroot
    nights_off = args.nights_off
    neo_night_pattern = args.neo_night_pattern
    neo_filters = args.neo_filters
    neo_repeat = args.neo_repeat
    ddf_season_frac = args.ddf_season_frac
    neo_am = args.neo_am
    neo_elong_req = args.neo_elong_req
    neo_area_req = args.neo_area_req
    nside = args.nside
    too_rate = args.too_rate
    too_filters = args.filters
    too_nfollow = args.nfollow

    mjd_start = 60796.0
    per_night = True  # Dither DDF per night

    camera_ddf_rot_limit = 75.0  # degrees

    fileroot, extra_info = set_run_info(
        dbroot=dbroot,
        file_end="v3.4_",
        out_dir=out_dir,
        rate=too_rate,
        ntoo=too_nfollow,
    )



def sched_argparser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", dest="verbose", action="store_true")
    parser.set_defaults(verbose=False)
    parser.add_argument("--survey_length", type=float, default=365.25 * 10)
    parser.add_argument("--out_dir", type=str, default="")
    parser.add_argument(
        "--maxDither", type=float, default=0.7, help="Dither size for DDFs (deg)"
    )
    parser.add_argument(
        "--moon_illum_limit",
        type=float,
        default=40.0,
        help="illumination limit to remove u-band",
    )
    parser.add_argument("--nexp", type=int, default=2)
    parser.add_argument("--rolling_nslice", type=int, default=2)
    parser.add_argument("--rolling_strength", type=float, default=0.9)
    parser.add_argument("--dbroot", type=str)
    parser.add_argument("--ddf_season_frac", type=float, default=0.2)
    parser.add_argument("--nights_off", type=int, default=3, help="For long gaps")
    parser.add_argument("--neo_night_pattern", type=int, default=4)
    parser.add_argument("--neo_filters", type=str, default="riz")
    parser.add_argument("--neo_repeat", type=int, default=4)
    parser.add_argument("--neo_am", type=float, default=2.5)
    parser.add_argument("--neo_elong_req", type=float, default=45.0)
    parser.add_argument("--neo_area_req", type=float, default=0.0)
    parser.add_argument(
        "--setup_only", dest="setup_only", default=False, action="store_true"
    )
    parser.add_argument(
        "--nside",
        type=int,
        default=32,
        help="Nside should be set to default (32) except for tests.",
    )
    parser.add_argument("--too_rate", type=float, default=10, help="N events per year")
    parser.add_argument("--filters", type=str, default="gz")
    parser.add_argument("--nfollow", type=int, default=1)

    return parser


if __name__ == "__main__":
    parser = sched_argparser()
    args = parser.parse_args()
    example_scheduler(args)
